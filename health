import warnings
warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.metrics import (
    r2_score, mean_absolute_error, mean_squared_error,
    accuracy_score, f1_score, roc_auc_score, confusion_matrix
)
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.ensemble import (
    RandomForestRegressor, GradientBoostingRegressor,
    RandomForestClassifier, GradientBoostingClassifier
)

RANDOM_STATE = 42
TEST_SIZE = 0.2
N_JOBS = -1

# Step 3: Load and Clean Data
df = pd.read_csv(CSV)
print(f"Loaded dataset with {df.shape[0]} rows and {df.shape[1]} columns")

drop_like = [c for c in df.columns if any(k in c.lower() for k in ["image_url"])]
if drop_like:
    df = df.drop(columns=drop_like)
    print("Dropped URL/image-related columns:", drop_like)

numeric_cols = ["calories","protein_g","carbs_g","fat_g","fiber_g","sugar_g",
                "sodium_mg","cholesterol_mg","serving_size_g","prep_time_min","cook_time_min","rating"]
for c in numeric_cols:
    if c in df.columns:
        df[c] = pd.to_numeric(df[c], errors="coerce")

if "is_healthy" in df.columns:
    if df["is_healthy"].dtype == object:
        df["is_healthy"] = df["is_healthy"].astype(str).str.strip().str.lower().map(
            {"yes":1,"true":1,"1":1,"no":0,"false":0,"0":0}
        )
    df["is_healthy"] = pd.to_numeric(df["is_healthy"], errors="coerce").astype("Int64")


